{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Italic;\f2\froman\fcharset0 Times-Bold;
\f3\froman\fcharset0 Times-BoldItalic;}
{\colortbl;\red255\green255\blue255;\red43\green50\blue61;\red255\green255\blue255;\red53\green59\blue71;
\red241\green249\blue255;\red0\green0\blue0;\red150\green0\blue126;\red181\green0\blue19;\red20\green0\blue195;
}
{\*\expandedcolortbl;;\cssrgb\c22353\c25882\c30588;\cssrgb\c100000\c100000\c100000;\cssrgb\c27059\c29804\c34902;
\cssrgb\c95686\c98039\c100000;\cssrgb\c0\c0\c0;\cssrgb\c66275\c5098\c56863;\cssrgb\c76863\c10196\c8627;\cssrgb\c10980\c392\c80784;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
Your goal is to implement a linked-list generic version of a "corrupt" queue. A corrupt queue has the standard operations of\'a0
\f1\i enqueue()
\f0\i0 \'a0of an item to the back and\'a0
\f1\i dequeue()
\f0\i0 \'a0an item from the front, but it also supports\'a0
\f1\i cut()
\f0\i0 \'a0where the item takes the\'a0
\f2\b second
\f0\b0 \'a0place from the front (unless there's nobody else there, so you just go right in front).\cb1 \
\cb3 We have provided you with template code to fill in.\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f3\i\b \cf2 \cb3 Example
\f0\i0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 CorruptQue<String> q = \cf7 new\cf4  CorruptQue<>();\
q.enqueue (\cf8 "First"\cf4 );\
q.enqueue (\cf8 "Second"\cf4 );\
q.enqueue (\cf8 "Third"\cf4 );\
q.cut (\cf8 "Cheater"\cf4 );\
System.out.println (q);\
\pard\pardeftab720\sa320\partightenfactor0

\fs32 \cf2 \cb3 should print out "First Cheater Second Third".\cb1 \
\pard\pardeftab720\sa320\partightenfactor0

\f3\i\b \cf2 \cb3 Another example
\f0\i0\b0 \'a0Using the operators to manipulate the queue, the following input\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 c \cf9 10\cf4 \
c \cf9 20\cf4 \
c \cf9 30\cf4 \
e \cf9 40\cf4 \
d\
d\
d\
\pard\pardeftab720\sa320\partightenfactor0

\fs32 \cf2 \cb3 should print out\cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf9 \cb5 10\cf4 \
\cf9 30\cf4 \
\cf9 20\cf4 \
\pard\pardeftab720\sa320\partightenfactor0

\fs32 \cf2 \cb3 since the number 30 cut in front of 20.\cb1 \

\f2\b \cb3 Input Format
\f0\b0 \cb1 \
\cb3 The first line of input is an integer\'a0\'a0with the number of operations to follow.\cb1 \
\cb3 The next\'a0\'a0lines that follow each consist of an operator\'a0\'a0and an integer\'a0. The operator\'a0\'a0can be one of the following: - Character 'e': Enqueue the integer\'a0\'a0into the corrupt queue (to back). - Character 'c': Cut the integer\'a0\'a0into the corrupt queue (to 2nd position from front). - Character 'd': Dequeue an integer from the front and print it out.\cb1 \
\cb3 Note that the template code already takes care of reading the input.\cb1 \

\f2\b \cb3 Constraints\
0<N<1000000000
\f0\b0 \cb1 \
\

\f2\b \cb3 Output Format
\f0\b0 \cb1 \
\cb3 Each line of output corresponds to an integer from a deque operation. It should meet the specification of the Corrupt Queue data structure.\cb1 \

\f2\b \cb3 Sample Input 0
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 4\
e 2668\
e 6813\
d\
d\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b\fs32 \cf2 \cb3 Sample Output 0
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 2668\
6813\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b\fs32 \cf2 \cb3 Sample Input 1
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 6\
c 4277\
c 4761\
e 824\
d\
d\
d\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b\fs32 \cf2 \cb3 Sample Output 1
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 4277\
4761\
824\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b\fs32 \cf2 \cb3 Sample Input 2
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 4\
e 9956\
d\
c 2142\
d\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b\fs32 \cf2 \cb3 Sample Output 2
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 9956\
2142\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b\fs32 \cf2 \cb3 Sample Input 3
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 4\
c 385\
e 182\
d\
d\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b\fs32 \cf2 \cb3 Sample Output 3
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 385\
182\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b\fs32 \cf2 \cb3 Sample Input 4
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 124\
e 6489\
e 4277\
e 5941\
d\
e 8039\
d\
e 4089\
c 9420\
d\
e 2995\
d\
e 83\
e 1777\
e 3648\
d\
c 4820\
d\
c 6830\
d\
e 6765\
c 7833\
d\
d\
d\
e 146\
e 6183\
c 1736\
e 4945\
c 9489\
e 7687\
d\
d\
d\
e 1182\
e 9910\
c 1002\
d\
d\
d\
d\
d\
d\
e 7641\
c 1941\
e 8519\
e 5107\
c 6490\
d\
c 5291\
d\
c 8801\
e 5527\
c 7899\
e 5399\
d\
c 8458\
e 1455\
e 8874\
c 3015\
e 8716\
c 4683\
c 5253\
c 1372\
d\
c 509\
e 1337\
e 628\
d\
d\
c 3655\
e 7685\
d\
d\
c 4193\
c 1513\
d\
d\
c 8232\
e 3308\
d\
c 7939\
d\
e 6097\
d\
e 3689\
e 8301\
e 9804\
d\
d\
d\
e 6811\
d\
d\
e 9363\
e 3219\
d\
c 118\
c 6176\
c 9609\
c 1777\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
d\
\pard\pardeftab720\sa320\partightenfactor0

\f2\b\fs32 \cf2 \cb3 Sample Output 4
\f0\b0 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 \cb5 6489\
4277\
5941\
9420\
8039\
4089\
4820\
6830\
7833\
2995\
83\
9489\
1736\
1777\
1002\
3648\
6765\
146\
6183\
4945\
6490\
5291\
7899\
1372\
509\
5253\
3655\
4683\
1513\
4193\
8232\
7939\
3015\
8458\
8801\
1941\
7687\
1182\
9910\
1777\
9609\
6176\
118\
7641\
8519\
5107\
5527\
5399\
1455\
8874\
8716\
1337\
628\
7685\
3308\
6097\
3689\
8301\
9804\
6811\
9363\
3219\
}